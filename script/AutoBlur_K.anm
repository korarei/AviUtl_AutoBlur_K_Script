--track0:sAngle,0,720,180
--track1:sPhase,-360,360,-90
--check0:Display Original,0
--dialog:Consider Script/chk,_1=0;Enable Dir Blur/chk,_2=1;Enable Rad Blur/chk,_3=1;Enable Rot Blur/chk,_4=0;└Relative Path,_5=true;└Mod Path,_6="..\\";└Param,_7={2, 256, 0};Keep Size,_8=false;Amount,_9=0.95;v0,_10={true, 0, 0, 0, 0}

--パラメータ
local shutter_angle = obj.track0
local shutter_phase = obj.track1
local chk_display_original = obj.check0
local chk_consider_script = _1 == 1 _1 = nil
local chk_directional_blur = _2 == 1 _2 = nil
local chk_radial_blur = _3 == 1 _3 = nil
local chk_rot_blur = _4 == 1 _4 = nil
local chk_relative_path = _5 _5 = nil
local mod_path = _6 _6 = nil
local rot_blur_param = _7 _7 = nil
local keep_size = _8 _8 = nil
local keep_size_num = keep_size and 1 or 0
local amount = _9 _9 = nil
local v0 = _10 and _10 or {true, 0, 0, 0, 0} _10 = nil

--サイズが0ならここで終わり
local w, h = obj.getpixel()
if (w * h == 0) then
    return
end

--定数
local f = (obj.getoption("camera_mode") == 0) and 1024 or obj.getoption("camera_param").d
local apparent_zoom = 1 * f / (f + obj.getvalue("z") + obj.oz)
local adjust = math.max(obj.getvalue("zoom") * obj.zoom * apparent_zoom / 100, 1e-10)
local dt = 1 / obj.framerate
local t0 = obj.time - dt
local id = obj.index

--関数
--スクリプトによって変化するパラメータをコピーする関数
local function copy_param(tbl, id)
    tbl[id] = {
        ox = obj.ox,
        oy = obj.oy,
        oz = obj.oz,
        zoom = obj.zoom,
        rz = obj.rz,
        time = obj.time
    }
end

--方向ブラーをかける関数
local function directional_blur(tbl, id, rz, dx_option, dy_option)
    --パラメータから変位を得る
    local dx = obj.getvalue("x") - obj.getvalue("x", t0)
    local dy = obj.getvalue("y") - obj.getvalue("y", t0)
    --相対座標による変位を得る
    if (chk_consider_script) then
        dx = dx + obj.ox - tbl[id].ox
        dy = dy + obj.oy - tbl[id].oy
    end

    dx = dx_option and dx_option or dx
    dy = dy_option and dy_option or dy

    --変位ベクトルを極座標化(位置から求めたラジアンってことでrad_pos。いい名前あったら教えて)
    local dr, rad_pos = math.sqrt(dx * dx + dy * dy), math.atan2(dy, dx)

    --中心座標を考慮したdx、dyを求め、その角度を得る。
    local r = math.sqrt((-obj.cx) * (-obj.cx) + (-obj.cy) * (-obj.cy))
    local theta = math.atan2(-obj.cy, -obj.cx)
    local scale1, scale0 = 0, 0
    if (chk_consider_script) then
        scale1, scale0 = obj.getvalue("zoom") / 100 * obj.zoom * f / (f + obj.getvalue("z") + obj.oz), obj.getvalue("zoom", t0) / 100 * tbl[id].zoom * f / (f + obj.getvalue("z", t0) + tbl[id].oz)
    else
        scale1, scale0 = obj.getvalue("zoom") / 100 * f / (f + obj.getvalue("z")), obj.getvalue("zoom", t0) / 100 * f / (f + obj.getvalue("z", t0))
    end

    local rz1 = chk_consider_script and obj.rz or obj.getvalue("rz")
    local rz0 = chk_consider_script and tbl[id].rz or obj.getvalue("rz", t0)

    local apparent_dx = scale1 * r * math.cos(theta + math.rad(rz1)) - scale0 * r * math.cos(theta + math.rad(rz0)) + dx
    local apparent_dy = scale1 * r * math.sin(theta + math.rad(rz1)) - scale0 * r * math.sin(theta + math.rad(rz0)) + dy

    local apparent_rad_pos = math.atan2(apparent_dy, apparent_dx)

    --ブラーをかける
    if (chk_directional_blur) then
        obj.effect("方向ブラー", "範囲", amount * math.abs(dr) * shutter_angle / (720 * adjust), "角度", 90 + math.deg(apparent_rad_pos) - obj.rz - rz, "サイズ固定", keep_size_num)
    end

    --中心座標の変化量を返す
    return dr * shutter_angle * (shutter_phase + 90) / (64800 * adjust), rad_pos
end

--放射ブラーをかける関数
local function radial_blur(tbl, id, cr, rad_pos, rz, d_deg, s_n_option, d_zoom_option, dz_option)
    --パラメータから変位を求める。zの変化は遠近法で見かけのサイズ変化量に変化させる。
    local s1, s0 = 0, 0
    if (chk_consider_script) then
        s1, s0 = obj.getvalue("zoom") * obj.zoom * f / (f + obj.getvalue("z") + obj.oz), obj.getvalue("zoom", t0) * tbl[id].zoom * f / (f + obj.getvalue("z", t0) + tbl[id].oz)
    else
        s1, s0 = obj.getvalue("zoom") * f / (f + obj.getvalue("z")), obj.getvalue("zoom", t0) * f / (f + obj.getvalue("z", t0))
    end
    s0 = s_n_option and s_n_option or s0
    local ds = s1 - s0

    --ブラーをかける
    if (chk_radial_blur) then
        cr = (ds > 0) and -cr or cr
        local d_rad = (ds > 0) and math.rad(d_deg) or math.rad(-d_deg)
        local cx, cy = obj.cx * math.cos(d_rad) - obj.cy * math.sin(d_rad), obj.cx * math.sin(d_rad) + obj.cy * math.cos(d_rad)
        obj.effect("放射ブラー", "範囲", amount * (1 - math.min(s1, s0) / math.max(s1, s0)) * shutter_angle * 10 / 36, "X",  cx - cr * math.cos(rad_pos - math.rad(obj.rz + rz)), "Y", cy - cr * math.sin(rad_pos - math.rad(obj.rz + rz)), "サイズ固定", keep_size_num)
    end

    --拡大率と中心座標を返す
    local d_zoom = chk_consider_script and obj.getvalue("zoom") * obj.zoom - obj.getvalue("zoom", t0) * tbl[id].zoom or d_zoom_option and d_zoom_option or obj.getvalue("zoom") - obj.getvalue("zoom", t0)
    local dz = chk_consider_script and obj.getvalue("z") + obj.oz - obj.getvalue("z", t0) - tbl[id].oz or dz_option and dz_option or obj.getvalue("z") - obj.getvalue("z", t0)
    local zoom, cz
    if (ds > 0) then
        zoom = d_zoom * shutter_angle * shutter_phase / (64800 * obj.zoom * obj.getvalue("zoom")) + 1
        cz = dz * shutter_angle * (shutter_phase + 90) / 32400
    else
        zoom = d_zoom * shutter_angle * (shutter_phase + 180) / (64800 * obj.zoom * obj.getvalue("zoom")) + 1
        cz = dz * shutter_angle * (shutter_phase + 180) / 64800
    end

    return zoom, cz
end

--回転ブラーをかける関数
local function rotational_blur(tbl, id, d_deg_option)
    --パラメータまたはテーブルから変位を得る
    local d_deg = chk_consider_script and obj.rz - tbl[id].rz or obj.getvalue("rz") - obj.getvalue("rz", t0)
    d_deg = d_deg_option and d_deg_option or d_deg

    if (chk_rot_blur) then
        --サイズ固定出ないときの正しいサイズを計算
        local a, b = w / 2 + math.abs(obj.cx), h / 2 + math.abs(obj.cy) --a,bの良い名称思いつかなかった
        local r = math.sqrt(a * a + b * b)
        if not keep_size then
            local add_x, add_y = math.ceil(r - w / 2 + 1), math.ceil(r - h / 2 + 1)
            obj.effect("領域拡張", "上", add_y, "下", add_y, "右", add_x, "左", add_x)
        end

        --moduleはscriptフォルダ直下も調べる
        package.cpath = package.cpath..";"..obj.getinfo("script_path"):gsub("[^\\]+\\$", "?.dll")
        package.path = package.path..";"..obj.getinfo("script_path"):gsub("[^\\]+\\$", "?.lua")
        --module pathがluaなのかdllなのか判定
        local lua_ext = ".lua"
        local dll_ext = ".dll"

        if (string.sub(mod_path, -string.len(lua_ext)) == lua_ext) then
            --luaパス追加
            if (chk_relative_path) then
                package.path = package.path..";"..obj.getinfo("script_path")..mod_path
            else
                package.path = package.path..";"..mod_path
            end
        elseif (string.sub(mod_path, -string.len(dll_ext)) == dll_ext) then
            --dllパス追加
            if (chk_relative_path) then
                package.cpath=package.cpath..";"..obj.getinfo("script_path")..mod_path
            else
                package.cpath=package.cpath..";"..mod_path
            end
        end

        local rot_blur_type = rot_blur_param[1]
        if (rot_blur_type == 1) then
            local reduce_angle_resolution = rot_blur_param[2]
            local quality_mode_display = rot_blur_param[3] == 1
            local quality_mode_output = rot_blur_param[4] == 1

            local data, width, height = obj.getpixeldata()
            local chk, T_RotBlur_Module = pcall(require, "T_RotBlur_Module")
            if (chk) then
                local is_quality_mode = (not obj.getinfo("saving") and quality_mode_display) or (obj.getinfo("saving") and quality_mode_output)
                local rot_blur = is_quality_mode and T_RotBlur_Module.RotBlur_S or T_RotBlur_Module.RotBlur_L
                rot_blur(data, width, height, amount * math.abs(d_deg) * shutter_angle / 720, obj.cx, obj.cy, 0, reduce_angle_resolution)
                obj.putpixeldata(data)
            else
                print("[AutoBlur_K.anm] T_RotBlur_Module.dllが見つかりません。回転ブラーのみoffにします。")
            end
        elseif (rot_blur_type == 2) then
            local quality = rot_blur_param[2]
            local reload = rot_blur_param[3] == 1

            local chk, RotBlur_M = pcall(require, "RotBlur_M")
            if (chk) then
                RotBlur_M.RotBlur_M(obj.cx, obj.cy, math.rad(amount * math.abs(d_deg) * shutter_angle / 720), 0, true, quality, reload)
            else
                print("[AutoBlur_K.anm] RotBlur_M.luaが見つかりません。回転ブラーのみoffにします。")
            end
        end
    end

    return d_deg * shutter_angle * (shutter_phase + 90) / 64800, d_deg
end

--グローバル空間に配列を用意する
if (chk_consider_script and (_ABK_P == nil)) then
    _ABK_P = {}
end
--もし配列にレイヤー情報が無ければ追加する
if (chk_consider_script and (_ABK_P[obj.layer] == nil)) then
    _ABK_P[obj.layer] = {}
end
--もし配列の中身がnilなら値を格納する
if (chk_consider_script and (_ABK_P[obj.layer][id] == nil)) then
    copy_param(_ABK_P[obj.layer], id)
end
--警告文でも流しとく
if (chk_consider_script and id == 0 and (obj.time - _ABK_P[obj.layer][id].time) < 0) then
    print("[AutoBlur_K.anm] シークバーが右から左に動いています。正常な結果を得られない可能性があります。")
end


local tbl = chk_consider_script and _ABK_P[obj.layer] or nil
local cx, cy = obj.cx, obj.cy
local rz, d_deg = 0, 0
local cr, rad_pos = 0, 0
local zoom, cz = 1, 0
--オリジナルを表示するために、キャッシュを取る
if (chk_display_original) then
    obj.copybuffer("cache:pre", "obj")
end

if (obj.time == 0) then
    if ((chk_consider_script) and (obj.getoption("camera_mode") ~= 3)) then
        copy_param(tbl, id)
    end

    if (v0[1] or not (v0[2] == 0 and v0[3] == 0 and v0[4] == 0 and v0[5] == 0)) then
        local dx, dy, s_n, d_zoom, dz, d_degree = 0, 0, 1, 0, 0, 0
        if ((not chk_consider_script) and v0[1]) then
            dx = 3 * (obj.getvalue("x", dt) - obj.getvalue("x")) - (obj.getvalue("x", 2 * dt) - obj.getvalue("x"))
            dy = 3 * (obj.getvalue("y", dt) - obj.getvalue("y")) - (obj.getvalue("y", 2 * dt) - obj.getvalue("y"))
            local s2, s1, s0 = obj.getvalue("zoom", 2 * dt) * f / (f + obj.getvalue("z", 2 * dt)), obj.getvalue("zoom", dt) * f / (f + obj.getvalue("z", dt)), obj.getvalue("zoom") * f / (f + obj.getvalue("z"))
            s_n = s0 - 3 * (s1 - s0) + (s2 - s0)
            d_zoom = 3 * (obj.getvalue("zoom", dt) - obj.getvalue("zoom")) - (obj.getvalue("zoom", 2 * dt) - obj.getvalue("zoom"))
            dz = 3 * (obj.getvalue("z", dt) - obj.getvalue("z")) - (obj.getvalue("z", 2 * dt) - obj.getvalue("z"))
            d_degree = 3 * (obj.getvalue("rz", dt) - obj.getvalue("rz")) - (obj.getvalue("rz", 2 * dt) - obj.getvalue("rz"))
        else
            dx = v0[2] * dt
            dy = v0[3] * dt
            s_n = obj.getvalue("zoom") * obj.zoom * f / (f + obj.getvalue("z") + obj.oz) - v0[4] * dt
            d_zoom = v0[4] * dt * (f + obj.getvalue("z")) / f
            d_degree = v0[5] * dt
        end
        rz, d_deg = rotational_blur(tbl, id, d_degree)
        cr, rad_pos = directional_blur(tbl, id, rz, dx, dy)
        zoom, cz = radial_blur(tbl, id, cr, rad_pos, rz, d_deg, s_n, d_zoom, dz)
    end
else
    rz, d_deg = rotational_blur(tbl, id)
    cr, rad_pos = directional_blur(tbl, id, rz)
    zoom, cz = radial_blur(tbl, id, cr, rad_pos, rz, d_deg)

    if ((chk_consider_script) and (obj.getoption("camera_mode") ~= 3)) then
        copy_param(tbl, id)
    end
end

obj.zoom = obj.zoom * math.max(zoom, 1e-2)
obj.rz = obj.rz + rz
obj.cx, obj.cy, obj.cz = obj.cx - cr * math.cos(rad_pos - math.rad(obj.rz)), obj.cy - cr * math.sin(rad_pos - math.rad(obj.rz)), obj.cz - cz


if (chk_display_original) then
    --このスクリプト以降のエフェクトはブラーにかける
    obj.effect()
    obj.draw()
    obj.copybuffer("obj", "cache:pre")
    obj.cx, obj.cy, obj.cz = cx, cy, obj.cz + cz
    obj.rz = obj.rz - rz
    obj.zoom = obj.zoom / math.max(zoom, 1e-2)
    obj.draw()
end


if (obj.frame == obj.totalframe) then
    _ABK_P = nil
end
